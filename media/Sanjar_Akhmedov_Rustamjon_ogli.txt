БИЛЕТ 1
1. Состав системы программирования. Интегрированная среда разработки – основные функции. Проект, группа проектов.
2. Ссылка на себя (this). Ключевое слово const.


1. Состав системы программирования. Интегрированная среда разработки – основные функции. Проект, группа проектов.

Система программирования - комплекс программ, которые помогают в разработке других программ.

Состав:
1. компилятор
2. отладчик
3. стандартные библиотеки и инструмент работы с новыми библиотеками
4. редактор кода
5. Сборщик (линкер)
6. всякие интрументы которые облегчают разработку программ (IntelliSense, графический редактор кода в Android Studio и т. д.)
7. интсрумент внедрения других инструментов

Проект - группа файлов относящиеся к решению одной задачи. Все что у них может быть общим - общее.
Всякие настройки, библиотеки и прочее и соотвественно собираются они тоже вместе, отдельно от других проектов.
Группа проестов соответственно несколько проектов собранных вместе для решения более сложной задачи.


Основная цель интегрированной среды разработки облегчить разрабоику новых программ. 
Гораздо удобнее работать с программой которая в сеюе соежиняет все нужные интсрументы (компилятор, отладчик и т.д.)
и к которому можно быстро подоединить новые инструменты.

2. Ссылка на себя (this). Ключевое слово const.

this это ссылка на объект которому принадлежит данная функция. То есть если у объеста есть какой то метод, то через this обращается именно к данному экземляру объекта.

class CircleClass : public ShapeClass
{
public:
	CircleClass(const int radius) { this->radius = radius; };
	~CircleClass() {};
	double calcArea() { return pi * radius * radius; };
	double calcPerimeter() { return 2 * pi*radius; };
private:
	double radius;
};

То есть здесь мы имеем конструктор в котором использовался this явно, а в calcArea и calcPerimeter неявно. this будет указывать на конкретный экземпляр класса CircleClass.
В С++ this используется неявно, а вот например на Python каждому методу класса придется передавать указатель self, и соответсвенно к полям класса надо будет обращаться через self.
То есть в Python self используется явно.

Если кратко, то ключевое слово const указывает что то соотвествующее ему не должно изменяться.
В предыщем примере 


class CircleClass : public ShapeClass
{
public:
	CircleClass(const int radius) { this->radius = radius; };
	~CircleClass() {};
	double calcArea() { return pi * radius * radius; };
	double calcPerimeter() { return 2 * pi*radius; };
private:
	double radius;
};

Аргумент конструктора помечен как const, значит поменять мы его не сможем.
То есть если мы напишем что то вроде

CircleClass(const int radius)
{ 
	radius = 3.14;
	this->radius = radius;
};

Компилятор выдаст ошибку что radius нельзя изменить.
Еще если const объект не обладает значением то компилятор также будет выдавать ощибку.
То есть если было объявление 

const int radius;

То выдастся ошибка что radius должен быть инициализирован.





















